generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Status {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique
  designation       String
  code              String              @unique
  category          Category[]
  mouvement         Movement[]
  product           Product[]
  productSalesPrice ProductSalesPrice[]
  unit              Unit[]
  user              User[]
}

model User {
  id                  Int        @id @default(autoincrement())
  uuid                String     @unique
  firstName           String
  lastName            String?
  isAdmin             Boolean
  email               String     @unique
  phone               String?
  password            String
  statusId            Int
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  editedMouvements    Movement[] @relation("Editor")
  validatedMouvements Movement[] @relation("Validator")
  status              Status     @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model Product {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique
  designation       String
  unitId            Int?
  statusId          Int
  categoryId        Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  description       String?
  details           Details[]
  category          Category?            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  unit              Unit?            @relation(fields: [unitId], references: [id], onDelete: Cascade)
  status            Status              @relation(fields: [statusId], references: [id], onDelete: Cascade)
  productSalesPrice ProductSalesPrice[]
}

model Unit {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique
  designation String
  statusId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
  Product     Product[]
}

model ProductSalesPrice {
  id                  Int      @id @default(autoincrement())
  productId           Int
  unitPrice           Float
  wholesale           Float?
  purchasePrice       Float?
  createdAt           DateTime @default(now())
  statusId            Int
  uuid                String   @unique
  product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  status              Status   @relation(fields: [statusId], references: [id], onDelete: Cascade)
  details             Details[]
}

model Category {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique
  designation String
  statusId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
  Product     Product[]
}

model Movement {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique
  editorId    Int
  validatorId Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  statusId    Int
  isSales     Boolean
  details     Details[]
  editor      User      @relation("Editor", fields: [editorId], references: [id], onDelete: Cascade)
  status      Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
  validator   User?     @relation("Validator", fields: [validatorId], references: [id], onDelete: Cascade)
}

model Details {
  id                      Int      @id @default(autoincrement())
  uuid                    String   @unique
  movementId              Int
  productId               Int
  salesPriceId            Int
  isUnitPrice             Boolean
  quantity                Float
  mouvement               Movement @relation(fields: [movementId], references: [id], onDelete: Cascade)
  product                 Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  salesPrice              ProductSalesPrice  @relation(fields: [salesPriceId], references: [id], onDelete: Cascade)
}
