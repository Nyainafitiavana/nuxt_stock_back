generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Status {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique
  designation       String
  code              String              @unique
  category          Category[]
  historyValidation HistoryValidation[]
  mouvement         Movement[]
  product           Product[]
  productSalesPrice ProductSalesPrice[]
  unit              Unit[]
  user              User[]
  expenseType       ExpenseType[]
  expenses          Expenses[]
}

model User {
  id                  Int                 @id @default(autoincrement())
  uuid                String              @unique
  firstName           String
  lastName            String?
  isAdmin             Boolean
  email               String              @unique
  phone               String?
  password            String
  statusId            Int
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  validatedMouvements HistoryValidation[] @relation("Validator")
  editedMouvements    Movement[]          @relation("Editor")
  status              Status              @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model Product {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique
  designation       String
  unitId            Int?
  statusId          Int
  categoryId        Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  description       String?
  details           Details[]
  category          Category?           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  status            Status              @relation(fields: [statusId], references: [id], onDelete: Cascade)
  unit              Unit?               @relation(fields: [unitId], references: [id], onDelete: Cascade)
  productSalesPrice ProductSalesPrice[]
}

model Unit {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique
  designation String
  statusId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]
  status      Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model ProductSalesPrice {
  id            Int       @id @default(autoincrement())
  productId     Int
  unitPrice     Float
  wholesale     Float?
  purchasePrice Float?
  createdAt     DateTime  @default(now())
  statusId      Int
  uuid          String    @unique
  details       Details[]
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  status        Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique
  designation String
  statusId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
  Product     Product[]
}

model Movement {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique
  editorId          Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  statusId          Int
  isSales           Boolean
  details           Details[]
  historyValidation HistoryValidation[]
  editor            User                @relation("Editor", fields: [editorId], references: [id], onDelete: Cascade)
  status            Status              @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model HistoryValidation {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique
  movementId  Int
  validatorId Int
  observation String?
  statusId    Int
  createdAt   DateTime @default(now())
  movement    Movement @relation(fields: [movementId], references: [id], onDelete: Cascade)
  status      Status   @relation(fields: [statusId], references: [id], onDelete: Cascade)
  validator   User     @relation("Validator", fields: [validatorId], references: [id], onDelete: Cascade)
}

model Details {
  id                 Int               @id @default(autoincrement())
  uuid               String            @unique
  movementId         Int
  productId          Int
  salesPriceId       Int
  isUnitPrice        Boolean
  quantity           Float
  quantityDelivered  Float?            @default(0)
  movement           Movement          @relation(fields: [movementId], references: [id], onDelete: Cascade)
  product            Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  salesPrice         ProductSalesPrice @relation(fields: [salesPriceId], references: [id], onDelete: Cascade)
}

model Settings {
  id                 Int      @id @default(autoincrement())
  uuid               String   @unique
  companyName        String
  currencyType       String
  companyPhoneNumber String
  companyAddress     String
  initialCash        Float?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  companyEmail       String   @unique
}

model ExpenseType {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique
  designation String
  statusId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
  expenses    Expenses[]
}

model Expenses {
  id             Int      @id @default(autoincrement())
  uuid           String   @unique
  expenseTypeId  Int
  description    String?
  amount         Float
  statusId       Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  expenseType    ExpenseType    @relation(fields: [expenseTypeId], references: [id], onDelete: Cascade)
  status         Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
}
